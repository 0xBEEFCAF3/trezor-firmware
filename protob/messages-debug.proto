syntax = "proto2";

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageDebug";

import "common.proto";

/**
 * Request: "Press" the button on the device
 * @next Success
 */
message DebugLinkDecision {
    optional bool yes_no = 1;   // true for "Confirm", false for "Cancel"
    optional bool up_down = 2;  // true for scroll up, false for scroll down
    optional string input = 3;  // keyboard input
}

/**
 * Request: Computer asks for device state
 * @next DebugLinkState
 */
message DebugLinkGetState {
}

/**
 * Response: Device current state
 * @prev DebugLinkGetState
 */
message DebugLinkState {
    optional bytes layout = 1;                  // raw buffer of display
    optional string pin = 2;                    // current PIN, blank if PIN is not set/enabled
    optional string matrix = 3;                 // current PIN matrix
    optional string mnemonic = 4;               // current BIP-39 mnemonic
    optional HDNodeType node = 5;               // current BIP-32 node
    optional bool passphrase_protection = 6;    // is node/mnemonic encrypted using passphrase?
    optional string reset_word = 7;             // word on device display during ResetDevice workflow
    optional bytes reset_entropy = 8;           // current entropy during ResetDevice workflow
    optional string recovery_fake_word = 9;     // (fake) word on display during RecoveryDevice workflow
    optional uint32 recovery_word_pos = 10;     // index of mnemonic word the device is expecting during RecoveryDevice workflow
    optional uint32 reset_word_pos = 11;        // index of mnemonic word the device is expecting during ResetDevice workflow
}

/**
 * Request: Ask device to restart
 */
message DebugLinkStop {
}

/**
 * Response: Device wants host to log event
 */
message DebugLinkLog {
    optional uint32 level = 1;
    optional string bucket = 2;
    optional string text = 3;
}

/**
 * Request: Read memory from device
 * @next DebugLinkMemory
 */
message DebugLinkMemoryRead {
    optional uint32 address = 1;
    optional uint32 length = 2;
}

/**
 * Response: Device sends memory back
 * @prev DebugLinkMemoryRead
 */
message DebugLinkMemory {
    optional bytes memory = 1;
}

/**
 * Request: Write memory to device.
 * WARNING: Writing to the wrong location can irreparably break the device.
 */
message DebugLinkMemoryWrite {
    optional uint32 address = 1;
    optional bytes memory = 2;
    optional bool flash = 3;
}

/**
 * Request: Erase block of flash on device
 * WARNING: Writing to the wrong location can irreparably break the device.
 */
message DebugLinkFlashErase {
    optional uint32 sector = 1;
}
